[
  {
    "title"  : "Task 1: Determine your Stores",
    "description" : "<div>What are the different domains we have in this super complicated world improving single-page application?</div>",
    "id": 0
  },
  {
    "title"  : "Task 2: Determine your Components",
    "description" : "<div>What are the different Components this application is built of?</div><div>Remember, the more Components, the better because the more we can reuse.</div>",
    "id": 1
  },
  {
    "title"  : "Task 3: Determine your State",
    "description" : "<div>Which Component will contain State? i.e. which Component will listen to which Store(s) and propagate changes down to its children using props? These are some tips that might help you figure this out:</div><ul><li>Is it passed in from a parent via props? If so, it probably isn't state.</li><li>Does it change over time? If not, it probably isn't state.</li><li>Can you compute it based on any other state or props in your component? If so, it's not state.</li></ul>",
    "id": 2
  },
  {
    "title"  : "Task 4: Download the Project",
    "description": "<div><ul><li> <p> Clone the <a href='https://github.com/ticup/jsconfbe2015'>Project</a>, either by downloading it <a href='https://github.com/ticup/jsconfbe2015/archive/master.zip'> here </a> or by cloning it with</p><p> git clone https://github.com/ticup/jsconfbe2015.git</p></li></div>",
    "id": 3
  },

  {
    "title"  : "Task 5: Get familiar with the Project",
    "description": "<div>The project has the following structure: </div> <ul><li class='mute'>/bin : some scripts <ul><li>/www : this starts the web server</li> <li  class='mute'>/reset : this resets the data (needs a server restart to take effect)</li></ul></li><li class='mute'>/data: the data of the server (not important)</li><li  class='mute'>/node_modules : the node modules we depend on (not important)</li><li>/public : the client-side code, <b>this is the folder you'll be working in!</b><ul><li  class='mute'>/common : files shared by both versions, such as css files and js library files. (not important)</li> <li>/pure : a working version of the application using pure html and javascript without React.</li><li>/react : skeleton code for the react + flux architecture</li></ul></li><li class='mute'>/routes : the web server code (not important)</li> <li class='mute'> /app.js : main code for the web server</li> <li class='mute'> /package.json : all the meta information on this project <br />+ some scripts to build your jsx files into js files conveniently</li></ul> <p> Your goal will be to take the working code from the /public/pure client and mould it into /public/react such that the app is now written using react+flux.",
    "id": 4
  },
  {
    "title"  : "Task 6: Run the Web Server",
    "description": "<div> <p> Run: <code>node bin/www</code> to start the web server. </p> <p> Visit <a href='http://localhost:3000/pure'>http://localhost:3000/pure</a> to visit the 'pure' client and </p> <p> <a href='http://localhost:3000/react'>http://localhost:3000/react</a> to visit the 'react' client (they both talk to the same server). </p> <p> The pure client should work, but it's normal that the react client's page is empty. It's your job to make this thing work! :)</p></div>",
    "id": 5
  },
  {
    "title"  : "Task 7: Run the JSX Compiler using watchify",
    "description": "<div>Next, you need to run the module 'watchify', which will transform your JSX files into regular javascript whenever you change (or create) a JSX file in public/react/components. Besides that it will also use browserify to transform the node.js require module style to a single file that we can run in the browser. This has been set up for you, all you have to do is run: <code> npm run start</code></div>",
    "id": 6
  },
  {
    "title"  : "Task 8: Get Programming!",
    "description": "<div>Your job is now to use the code that is in /public/pure and mould it in a React + Flux architecture in /public/react, where I have set up all of the boilerplate code for you.</div>",
    "id": 7
  },
  {
    "title"  : "Task 9: A Static Page with Props",
    "description": "<div>To get your fingers wet with React, let's start by <emph>reactifying</emph> the whole public/pure/index.html page, but without using state.<ul><li>This means we just recreate the static structure using the html of the pure client, but by putting it in Components and rendering the Component tree.</li><li> Use <b>props</b> whenever you can to make the Components more reusable. For example, the title in the header is definitely something you can pass in with props. </li><li> Wherever you normally are planning to use state, let's just temporarily plug in some stubs, so we don't have to deal with server communication yet! </li></ul> <p> If you want you can use <a href='https://facebook.github.io/react/html-jsx.html'>this</a> page to convert parts of your html into a React Component </p><p> Do this gradually and in as small as possible iterations so you can check if everything is rendering fine on <a href='http://localhost:3000/react'>localhost:3000/react</a>. </p> <p> Here is a guideline to get you started if you don't know how to start: </p> <ul><li> Create a root component and make sure you render it in the DOM in app.js.</li><li>Render the header part and pass in a title and subtitle as props from your root component.</li><li>Render the divider.</li><li>Render a main component where all the content will go.</li><li>Render the options at the top of the page.</li><li>Render the main content with the tasks and questions. For this part you will have to start digging into public/pure/js/tasks.js and public/pure/js/questions.js and use the jquery code that is used to inject the tasks and questions.</li><li>Use the tasks from data/tasks.json for the tasks: <code> var tasks = require('../../../../data/tasks.json'); </code></li><li>The questions will be giving to us by the server, so for now we take some static questions so we can test the layout render. Use the questions from public/react/stubs.json by simply requiring that file and passing them as a prop to the questions component.</li><li>Your tasks will not go open when you click them. Find the correct code in public/pure/tasks.js (makeActive, makeInactive) and use <b>State</b> in your TaskItem to produce the correct classnames depending on your state. You will need to do some string manipulation in your render function here. </li><li>Use the onClick attribute on the header to toggle the state.</li><li>You will see that the task descriptions are output as html strings, we'll just leave that for now.</li></ul></div>",
    "id": 8
  },
  {
    "title"  : "Task 10: A Dynamic Page with State Updated by the Server",
    "description": "<div>Swap in the question stubs by the dynamic questions of the server. <ul><li>Create a QuestionStore which will contain the questions.</li><li> Translate incoming messages from the server into actions in the <b>utils/WebAPI.js</b>, requiring you to do the following for each server-side action ('receiving all questions' and  'receiving a new question'):<ul><li> Add an ActionType in constants/AppConstants </li><li>Add an action creator in actions/ActionCreator.js</li><li>Change your data appropriately in the stores whenever a relevant action occurs and emit the change event on the store.</li></ul></li> <li> Add state to the appropriate component(s) and retrieve the data from the stores and put it in the state. </li> <li> Attach a change listener to the QuestionStore in the QuestionComponent and update the state whenever change is observed. </li></ul> <p> The only changing state from the server we have are actually the questions, so go and have a look at /pure/js/questions.js. (tasks.js also has changing state from the server, but don't worry about that you can leave it out!) </p> </div>",
    "id": 9
  },
  {
    "title"  : "Task 11: Asking questions",
    "description": "<div>Now you should actually see these tasks and questions will be updated in real-time (you can test this by asking a question using the pure client). Next step is to enable the asking of questions. In order to do so: <ul> <li>Add an onSubmit listener to the question form </li><li>Trigger an action to create a question with the appropriate data retrieved from the form using an action creator and send the request to the server using the WebAPIUtils.</li></ul></div>",
    "id": 10
  },
  {
    "title"  : "Task 12: Filtering",
    "description": "<div>So now you receive data from the server in real-time and you can post questions. The last thing to do is the filtering:<ul><li> Make sure that the text you type in the task filter input does the actual filtering on the tasks.</li><li> Make sure that if the 'Hide Questions' checkbox is checked, that the questions are hidden. </li></ul> </div>",
    "id": 11
  },
  {
    "title"  : "Task 13: Profit",
    "description": "<div>You completely fluxireactified the hell out of this application. Cool man!</div>",
    "id": 12
  }

]